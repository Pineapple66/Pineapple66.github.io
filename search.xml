<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Toying My Cloud</title>
    <url>/2015/09/15/Toying-My-Cloud/</url>
    <content><![CDATA[<p>My Cloud™ Home is an easy-to-use personal cloud storage device that plugs directly into your router at home so you can save all your digital content in one central place. Unlike a NAS, it’s a simple centralized solution to ….</p>
<p>More detail  <a href="https://shop.westerndigital.com/products/cloud-storage/wd-my-cloud-home" target="_blank" rel="noopener">Click me to official site</a></p>
<p>Instead of continue doing sales job today, we are going to take look at a few interests points.</p>
<a id="more"></a>

<h4 id="Interests-Points-1-OS-amp-SSH"><a href="#Interests-Points-1-OS-amp-SSH" class="headerlink" title="Interests Points 1 . OS &amp; SSH"></a>Interests Points 1 . OS &amp; SSH</h4><p>A computer product offers certain services it must a hardware and some software. Logging on with ssh or perform Nmap scanning will allow us to see what is in the back. After reviewing the official documentation online, we know that the default user is root with password Welc0me. In order to change that, we need to first turn on ssh access to My Cloud box.</p>
<h5 id="Turn-On-SSH"><a href="#Turn-On-SSH" class="headerlink" title="Turn On SSH"></a>Turn On SSH</h5><p>Navigate to the settings page and turn ON  “SSH”</p>
<img src="/2015/09/15/Toying-My-Cloud/SSH_config.jpg" class="">

<h5 id="Change-Password"><a href="#Change-Password" class="headerlink" title="Change Password"></a>Change Password</h5><p>I was using windows environment on this demo, and putty was downloaded previously. Login by entering the IP address listed on the configuration page with the default password. Once you have login via Putty, issues the following commands to change the root password.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
<h4 id="Interests-Points-2-SSH-key-file-login"><a href="#Interests-Points-2-SSH-key-file-login" class="headerlink" title="Interests Points 2 . SSH key file login"></a>Interests Points 2 . SSH key file login</h4><p>Since we know this is debian system, we can try to enable the ssh login via keys to harden the device. The reason of utilizing this method is my network condition, I was using the campus dorms room’s network, where I didn’t have control of anything, and we did have some students who loves “scanning” the network with brute-force attack..</p>
<h5 id="Using-Key-Gen"><a href="#Using-Key-Gen" class="headerlink" title="Using Key-Gen"></a>Using Key-Gen</h5><p>Download and run the Putty key-gen from <a href="https://www.puttygen.com/" target="_blank" rel="noopener">Here</a>  </p>
<h5 id="Generating-the-SSH-Key-Pairs"><a href="#Generating-the-SSH-Key-Pairs" class="headerlink" title="Generating the SSH Key Pairs"></a>Generating the SSH Key Pairs</h5><p>Click Generate on the key-gen software to start the processes. It will looks like this when it was completed.</p>
<img src="/2015/09/15/Toying-My-Cloud/3.png" class="">

<p>Save both your public key and private key somewhere save on your file sever, NEVER share your private key with anyone.</p>
<h5 id="Import-SSH-key-into-the-box"><a href="#Import-SSH-key-into-the-box" class="headerlink" title="Import SSH key into the box"></a>Import SSH key into the box</h5><p>If you are continue using root to login, you may create a Directory /root/.ssh/authorized_keys with</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;.ssh</span><br><span class="line">touch ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>
<p>Once finished, open authorized_keys by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>
<p>copy and paste the public key to this file, save, and exit.</p>
<img src="/2015/09/15/Toying-My-Cloud/4.png" class="">

<p>You are done! This linux box is now support ssh key login.   </p>
<img src="/2015/09/15/Toying-My-Cloud/6.png" class="">
<img src="/2015/09/15/Toying-My-Cloud/5.png" class="">


<h4 id="Interests-Points-3-Turn-ON-HTTPS-amp-amp-SFTP-connection-Failed"><a href="#Interests-Points-3-Turn-ON-HTTPS-amp-amp-SFTP-connection-Failed" class="headerlink" title="Interests Points 3 . Turn ON HTTPS &amp;&amp; SFTP connection - Failed"></a>Interests Points 3 . Turn ON HTTPS &amp;&amp; SFTP connection - Failed</h4><p>With the better understanding of this slim version of debian Linux,  we might be able to turn on the https and Sftp on this device. HTTP and FTP is used by default on this software version, which it is a security hazard. From a WireShark packet captured we can see the password was submitted and transferred with plain text.<br>HTTP</p>
<img src="/2015/09/15/Toying-My-Cloud/1.png" class="">
<p>FTP</p>
<img src="/2015/09/15/Toying-My-Cloud/2.png" class="">

<h5 id="It-is-NOT-supported-officially"><a href="#It-is-NOT-supported-officially" class="headerlink" title="It is NOT supported officially"></a>It is NOT supported officially</h5><p>Navigate to My Cloud web configuration page,  you will easily see the overall usage and FTP On &amp; OFF button…However, there is NO config or settings anywhere I can go and modify this settings, which provides this box no security feature.</p>
<h4 id="Interests-Points-4-Misc"><a href="#Interests-Points-4-Misc" class="headerlink" title="Interests Points 4 . Misc"></a>Interests Points 4 . Misc</h4><p>After using Nmap and toying around the box, there is not much services (ports) that this box offers. with limited processing power available, the encrypt and decrypt processes could not be satisfied.<br>Since this is a debian box, tcpdump should still on there…</p>
<img src="/2015/09/15/Toying-My-Cloud/7.png" class="">
<img src="/2015/09/15/Toying-My-Cloud/8.jfif" class="">

<p>it looks like they are using these dynamic port 49153 to receiving the data..</p>
<h4 id="Updates-On-2016"><a href="#Updates-On-2016" class="headerlink" title="Updates On 2016"></a>Updates On 2016</h4><p>Right before sold this unit. I teared it down, it just a fan-less compute board with a 3TB WD RED hard drive inside, not sure about the processor model and amount of ram. This unit was sold in April 2016 due to lack of security, low transferring speed, and no redundancy options.  </p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NAS</tag>
        <tag>TCP/IP</tag>
        <tag>WireShark</tag>
      </tags>
  </entry>
  <entry>
    <title>ByPass ASA 5505 Login Password</title>
    <url>/2017/10/29/ByPass-ASA-5505-Login-Password/</url>
    <content><![CDATA[<p>You can never refuse the free stuff from work. This is a decommissioned firewall unit from a branch office. This ASA 5505 unit has an basic license with 512 MB RAM and an AMD 500MHz Geode CPU.</p>
<p>On this tutorial, I will show you how to reset/bypass the password on this unit.</p>
<a id="more"></a>

<p>Here is the detail version information about this unit.</p>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/1.png" class="">

<h4 id="Step-1-Connect-Unit-to-Your-Device"><a href="#Step-1-Connect-Unit-to-Your-Device" class="headerlink" title="Step 1 Connect Unit to Your Device"></a>Step 1 Connect Unit to Your Device</h4><p>Locate the console port on the ASA unit – Marked Blue on the device, and use a Cisco serial cable connect to your desktop serial port.<br>Cable looks like this</p>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/2.jfif" class="">

<p>Once that is done, open your device manager and look under “Ports(COM&amp;LPT)” section, we will need to find out the correct COM number. Make sure you connected before move on to the next step.  </p>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/1-5.png" class="">


<h4 id="Step-2-Turn-it-off"><a href="#Step-2-Turn-it-off" class="headerlink" title="Step 2 Turn it off"></a>Step 2 Turn it off</h4><p>Unplug the power to turn it off, and then power it back on.</p>
<h4 id="Step-3-ROMMON-Mode"><a href="#Step-3-ROMMON-Mode" class="headerlink" title="Step 3 ROMMON Mode"></a>Step 3 ROMMON Mode</h4><p>Taping “Escape” Key while the device is booting, you will be guided into ROMMON mode, it looks like this.</p>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/3.png" class="">

<h4 id="Step-4-Set-the-Register-Value"><a href="#Step-4-Set-the-Register-Value" class="headerlink" title="Step 4 Set the Register Value"></a>Step 4 Set the Register Value</h4><p>This commandwill set the ASA to ignore the startup configuration. Type the following commands to update the configuration Register value:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rommon #0&gt; confreg 0x41</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rommon #1&gt; confreg</span><br></pre></td></tr></table></figure>
<p> Accept the default values for all settings, except for the “disable system configuration?” value; at that prompt, enter Y.</p>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/4.png" class="">


<h4 id="Step-5-Boot-the-Device"><a href="#Step-5-Boot-the-Device" class="headerlink" title="Step 5 Boot the Device"></a>Step 5 Boot the Device</h4><p>Issues following command to continue boot process for the device.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rommon #2&gt; boot</span><br></pre></td></tr></table></figure>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/5.png" class="">

<h4 id="Step-6-Enter-EXEC-mode"><a href="#Step-6-Enter-EXEC-mode" class="headerlink" title="Step 6 Enter EXEC mode"></a>Step 6 Enter EXEC mode</h4><p>At this point, password should be blank now. Once system is up, enter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ciscoasa&gt; en</span><br></pre></td></tr></table></figure>
<p>With “blank” password to enter EXEC mode— Just hit enter key, there is no Password.</p>
<h4 id="Step-7-Copy-Start-up-Config-to-Running-Config"><a href="#Step-7-Copy-Start-up-Config-to-Running-Config" class="headerlink" title="Step 7 Copy Start-up Config to Running Config"></a>Step 7 Copy Start-up Config to Running Config</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ciscoasa# copy startup-config running-config</span><br></pre></td></tr></table></figure>
<h4 id="Step-8-optional-Set-a-New-Password"><a href="#Step-8-optional-Set-a-New-Password" class="headerlink" title="Step 8 (optional) Set a New Password"></a>Step 8 (optional) Set a New Password</h4><p>This step is optional, depending on your needs.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ciscoasa# conf t</span><br><span class="line">ciscoasa(config)# password devicepassword</span><br><span class="line">ciscoasa(config)# enable password EXECmodepassword</span><br><span class="line">ciscoasa(config)# username orange password userorangepassword</span><br></pre></td></tr></table></figure>
<h4 id="Step-9-Set-the-Register-Back"><a href="#Step-9-Set-the-Register-Back" class="headerlink" title="Step 9 Set the Register Back"></a>Step 9 Set the Register Back</h4><p>In order to boot normally, we need to reset the register value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ciscoasa(config)# config-register 0x1</span><br></pre></td></tr></table></figure>
<h4 id="Step-10-Save-the-Settings-amp-All-Done"><a href="#Step-10-Save-the-Settings-amp-All-Done" class="headerlink" title="Step 10 Save the Settings &amp; All Done!"></a>Step 10 Save the Settings &amp; All Done!</h4><p>Copy running-config to startup-config and reload, you are all done!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">write mem</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reload</span><br></pre></td></tr></table></figure>
<img src="/2017/10/29/ByPass-ASA-5505-Login-Password/6.png" class="">
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Meraki MR18 OpenWRT</title>
    <url>/2019/02/15/Meraki-MR18-OpenWRT/</url>
    <content><![CDATA[<p>Cisco Meraki enterprise network is a cloud-managed IT company, their product include wireless, switching, security, enterprise mobility management and security cameras, all centrally managed from the web. Meraki MR18 offers great performance overall for small home/office deployments.</p>
<p>However in order to using their product, we need to purchase a license for each devices, which does not work really well in the home environment. Thanks to the OpenWRT project, we are able to bring these Meraki equipment back to live.</p>
<a id="more"></a>

<p>This is a complete guide to flash OpenWRT firmware into a MR18 unit.</p>
<p>All the firmware files, please navigate to OpenWRT official site for downloads <a href="https://openwrt.org/toh/meraki/mr18" target="_blank" rel="noopener">“Click Me”</a></p>
<h4 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h4><ol>
<li>MR18</li>
<li>UART cable</li>
<li>local HTTP server</li>
<li>A router (extra one will be great, you need to keep this router offline during the whole flash process)</li>
</ol>
<p>Meraki device will try to upgrade their firmware as soon as they have internet access. Keep them offline.</p>
<h4 id="Step-1-Connect-the-UART-port-and-power-on"><a href="#Step-1-Connect-the-UART-port-and-power-on" class="headerlink" title="Step 1 Connect the UART port and power on"></a>Step 1 Connect the UART port and power on</h4><p>Flip the unit over, remove the 4 rubber feet on the bottom to expose the screws. Remove these screws we will see the “Heart” of this AP unit.</p>
<p>Grab your UART cable and connect these cable accordingly.</p>
<img src="/2019/02/15/Meraki-MR18-OpenWRT/1.png" class="">

<h4 id="Step-2-Locate-the-Version-Number-of-This-Device"><a href="#Step-2-Locate-the-Version-Number-of-This-Device" class="headerlink" title="Step 2 Locate the Version Number of This Device"></a>Step 2 Locate the Version Number of This Device</h4><p>With the UART cable plugged in, open your console and find the correct COM port and connect to it with the speed (baud) 115200</p>
<p> While the device is booting, we can see something like this</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Meraki&gt; odm fw_version</span><br><span class="line">24-201611211457-G69d4dc09-mantua</span><br></pre></td></tr></table></figure>
<p>According to the official site, this version can flash with method C.</p>
<h4 id="Step-3-Connect-your-MR18-to-Offline-Router"><a href="#Step-3-Connect-your-MR18-to-Offline-Router" class="headerlink" title="Step 3 Connect your MR18 to Offline Router"></a>Step 3 Connect your MR18 to Offline Router</h4><p>Grab your router and connect that with your MR18 and your laptop, make sure they are both located in the same network/vlan.</p>
<h4 id="Step-4-Level-2-Reset-for-MR18"><a href="#Step-4-Level-2-Reset-for-MR18" class="headerlink" title="Step 4 Level 2 Reset for MR18"></a>Step 4 Level 2 Reset for MR18</h4><p>Hold the reset button on the MR18 for 10+ seconds. You should see the LED blink, and then turn off. Once the LED turns off you can stop holding the reset button. This does a “Level 2” reset and removes any configs from the access point.</p>
<h4 id="Step-5-Prepare-Files-for-Flashing"><a href="#Step-5-Prepare-Files-for-Flashing" class="headerlink" title="Step 5 Prepare Files for Flashing"></a>Step 5 Prepare Files for Flashing</h4><p>Once the MR18 booted, start a HTTP server (on port 80) on your personal computer in the same directory as the firmware files. If you are running Linux like me, this can be done using the below example: I know, I know, python2 is longer supported..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;servernetworktech.com&#x2F;uploads&#x2F;files&#x2F;MR18-LEDE.tar.gz</span><br><span class="line">tar xzvf .&#x2F;MR18-LEDE.tar.gz</span><br><span class="line">cd .&#x2F;MR18-LEDE&#x2F;</span><br><span class="line">sudo python2 -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure>
<p>If you don’t have Python2 install, please use following command to perform the install.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python2</span><br></pre></td></tr></table></figure>
<h4 id="Step-6-Load-the-firmware-to-MR18"><a href="#Step-6-Load-the-firmware-to-MR18" class="headerlink" title="Step 6 Load the firmware to MR18"></a>Step 6 Load the firmware to MR18</h4><p>Once HTTP server started, you can then load this image to the “part2” partition on the MR18. This is done with the following</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">odm firmware part2  192.168.1.10:80&#x2F;lede-ar71xx-nand-mr18-initramfs-kernel.bin</span><br></pre></td></tr></table></figure>
<p>Note: Replace 192.168.1.10 with your laptop’s IP.</p>
<p>If you do it correctly, you will see the following on the UART console window</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Meraki&gt; odm firmware part2 192.168.1.248:80&#x2F;lede-ar71xx-nand-mr18-initramfs-kernel.bin</span><br><span class="line">Connecting to 20.10.1.248:80 (20.10.1.248:80)</span><br><span class="line">firmware.tmp         100% |*******************************|  7169k  0:00:00 ETA</span><br><span class="line">Erasing 128 Kibyte @ 7e0000 -- 100 % complete</span><br><span class="line">Writing data to block 0 at offset 0x0</span><br><span class="line">Writing data to block 1 at offset 0x20000</span><br><span class="line">Writing data to block 2 at offset 0x40000</span><br><span class="line">Writing data to block 3 at offset 0x60000</span><br><span class="line">Writing data to block 4 at offset 0x80000</span><br><span class="line">Writing data to block 5 at offset 0xa0000</span><br><span class="line">Writing data to block 6 at offset 0xc0000</span><br><span class="line">Writing data to block 7 at offset 0xe0000</span><br><span class="line">Writing data to block 8 at offset 0x100000</span><br><span class="line">Writing data to block 9 at offset 0x120000</span><br><span class="line">Writing data to block 10 at offset 0x140000</span><br><span class="line">Writing data to block 11 at offset 0x160000</span><br><span class="line">Writing data to block 12 at offset 0x180000</span><br><span class="line">Writing data to block 13 at offset 0x1a0000</span><br><span class="line">Writing data to block 14 at offset 0x1c0000</span><br><span class="line">Writing data to block 15 at offset 0x1e0000</span><br><span class="line">Writing data to block 16 at offset 0x200000</span><br><span class="line">Writing data to block 17 at offset 0x220000</span><br><span class="line">Writing data to block 18 at offset 0x240000</span><br><span class="line">Writing data to block 19 at offset 0x260000</span><br><span class="line">Writing data to block 20 at offset 0x280000</span><br><span class="line">Writing data to block 21 at offset 0x2a0000</span><br><span class="line">Writing data to block 22 at offset 0x2c0000</span><br><span class="line">Writing data to block 23 at offset 0x2e0000</span><br><span class="line">Writing data to block 24 at offset 0x300000</span><br><span class="line">Writing data to block 25 at offset 0x320000</span><br><span class="line">Writing data to block 26 at offset 0x340000</span><br><span class="line">Writing data to block 27 at offset 0x360000</span><br><span class="line">Writing data to block 28 at offset 0x380000</span><br><span class="line">Writing data to block 29 at offset 0x3a0000</span><br><span class="line">Writing data to block 30 at offset 0x3c0000</span><br><span class="line">Writing data to block 31 at offset 0x3e0000</span><br><span class="line">Writing data to block 32 at offset 0x400000</span><br><span class="line">Writing data to block 33 at offset 0x420000</span><br><span class="line">Writing data to block 34 at offset 0x440000</span><br><span class="line">Writing data to block 35 at offset 0x460000</span><br><span class="line">Writing data to block 36 at offset 0x480000</span><br><span class="line">Writing data to block 37 at offset 0x4a0000</span><br><span class="line">Writing data to block 38 at offset 0x4c0000</span><br><span class="line">Writing data to block 39 at offset 0x4e0000</span><br><span class="line">Writing data to block 40 at offset 0x500000</span><br><span class="line">Writing data to block 41 at offset 0x520000</span><br><span class="line">Writing data to block 42 at offset 0x540000</span><br><span class="line">Writing data to block 43 at offset 0x560000</span><br><span class="line">Writing data to block 44 at offset 0x580000</span><br><span class="line">Writing data to block 45 at offset 0x5a0000</span><br><span class="line">Writing data to block 46 at offset 0x5c0000</span><br><span class="line">Writing data to block 47 at offset 0x5e0000</span><br><span class="line">Writing data to block 48 at offset 0x600000</span><br><span class="line">Writing data to block 49 at offset 0x620000</span><br><span class="line">Writing data to block 50 at offset 0x640000</span><br><span class="line">Writing data to block 51 at offset 0x660000</span><br><span class="line">Writing data to block 52 at offset 0x680000</span><br><span class="line">Writing data to block 53 at offset 0x6a0000</span><br><span class="line">Writing data to block 54 at offset 0x6c0000</span><br><span class="line">Writing data to block 55 at offset 0x6e0000</span><br><span class="line">Writing data to block 56 at offset 0x700000</span><br><span class="line">Successfully updated part2 to 20.10.1.248:80&#x2F;lede-ar71xx-nand-mr18-initramfs-kernel.bin</span><br><span class="line">&lt;Meraki&gt;</span><br></pre></td></tr></table></figure>
<p>If you don’t know which IP that Meraki gets, please login to your router and find out.</p>
<h4 id="Step-7-Start-MR18-with-number-2-key-pressed"><a href="#Step-7-Start-MR18-with-number-2-key-pressed" class="headerlink" title="Step 7 Start MR18 with number 2 key pressed"></a>Step 7 Start MR18 with number 2 key pressed</h4><p>Once uploading was completed, remove power from the Meraki MR18. Now that power is removed, in your UART session hold down “2” on your keyboard while applying power. This should now boot you into the initramfs image you just flashed to the MR18.</p>
<p>For the reason why “2” need to pressed and hold,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.974140] kmodloader: loading kernel modules from &#x2F;etc&#x2F;modules-boot.d&#x2F;*</span><br><span class="line">2[    5.983117] kmodloader: done loading kernel modules from &#x2F;etc&#x2F;modules-boot.d&#x2F;*</span><br><span class="line">[    5.991412] init: - preinit -</span><br><span class="line">2222222[    6.194014] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready</span><br><span class="line">2Press the [f] key and hit [enter] to enter failsafe mode</span><br><span class="line">Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level</span><br><span class="line">22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222[    9.320079] procd: - early -</span><br><span class="line">[    9.323075] procd: - watchdog -</span><br><span class="line">222222222222222222[    9.865256] procd: - ubus -</span><br><span class="line">22[    9.919344] procd: - init -</span><br><span class="line">Please press Enter to activate this console.</span><br><span class="line">2222[   10.053565] kmodloader: loading kernel modules from &#x2F;etc&#x2F;modules.d&#x2F;*</span><br><span class="line">2[   10.063282] ip6_tables: (C) 2000-2006 Netfilter Core Team</span><br><span class="line">[   10.077192] Loading modules backported from Linux version wt-2017-01-31-0-ge882dff19e7f</span><br><span class="line">[   10.085355] Backport generated by backports.git backports-20160324-13-g24da7d3c</span><br><span class="line">2[   10.095128] ip_tables: (C) 2000-2006 Netfilter Core Team</span><br><span class="line">[   10.106462] nf_conntrack version 0.5.0 (1954 buckets, 7816 max)</span><br><span class="line">2[   10.148845] xt_time: kernel timezone is -0000</span><br><span class="line">22[   10.197095] PPP generic driver version 2.4.2</span><br><span class="line">[   10.203387] NET: Registered protocol family 24</span><br></pre></td></tr></table></figure>
<h4 id="Step-8-Connect-to-your-PC-directly"><a href="#Step-8-Connect-to-your-PC-directly" class="headerlink" title="Step 8 Connect to your PC directly"></a>Step 8 Connect to your PC directly</h4><p>With the snapshot being uploaded, unplug the MR18 from your router, and directly wire your computer to it. Once wired, you should get a IP from the MR18.</p>
<p>Now that recovery is flashed, open a browser on your computer and navigate to <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a>. Once signed into LuCI, you can then flash the current sysupgrade image for the MR18.</p>
<p>Here is what is happening in the background. Once flashed, you can input any busybox commands and execute as root here. It also showed you that this unit has an ip now, 192.168.1.1.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[   17.536270] kmodloader: done loading kernel modules from &#x2F;etc&#x2F;modules.d&#x2F;*</span><br><span class="line">[   23.768242] device eth0 entered promiscuous mode</span><br><span class="line">[   23.785955] IPv6: ADDRCONF(NETDEV_UP): br-lan: link is not ready</span><br><span class="line">[   24.406947] eth0: link up (1000Mbps&#x2F;Full duplex)</span><br><span class="line">[   24.411675] br-lan: port 1(eth0) entered forwarding state</span><br><span class="line">[   24.417211] br-lan: port 1(eth0) entered forwarding state</span><br><span class="line">[   24.458978] IPv6: ADDRCONF(NETDEV_CHANGE): br-lan: link becomes ready</span><br><span class="line">[   26.415041] br-lan: port 1(eth0) entered forwarding state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BusyBox v1.26.2 () built-in shell (ash)</span><br><span class="line"></span><br><span class="line">     _________</span><br><span class="line">    &#x2F;        &#x2F;\      _    ___ ___  ___</span><br><span class="line">   &#x2F;  LE    &#x2F;  \    | |  | __|   \| __|</span><br><span class="line">  &#x2F;    DE  &#x2F;    \   | |__| _|| |) | _|</span><br><span class="line"> &#x2F;________&#x2F;  LE  \  |____|___|___&#x2F;|___|                      lede-project.org</span><br><span class="line"> \        \   DE &#x2F;</span><br><span class="line">  \    LE  \    &#x2F;  -----------------------------------------------------------</span><br><span class="line">   \  DE    \  &#x2F;    Reboot (SNAPSHOT, r4125-83e4ed3)</span><br><span class="line">    \________\&#x2F;    -----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D; WARNING! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">There is no root password defined on this device!</span><br><span class="line">Use the &quot;passwd&quot; command to set up a new password</span><br><span class="line">in order to prevent unauthorized SSH logins.</span><br><span class="line">--------------------------------------------------</span><br><span class="line">root@LEDE:&#x2F;# ifconfig</span><br><span class="line">br-lan    Link encap:Ethernet  HWaddr 00:18:0A:F7:B9:80  </span><br><span class="line">          inet addr:192.168.1.1  Bcast:192.168.1.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fdd1:846:f940::1&#x2F;60 Scope:Global</span><br><span class="line">          inet6 addr: fe80::218:aff:fef7:b980&#x2F;64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3300 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:3161 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:233588 (228.1 KiB)  TX bytes:247533 (241.7 KiB)</span><br></pre></td></tr></table></figure>
<h4 id="Step-9-Well-Done"><a href="#Step-9-Well-Done" class="headerlink" title="Step 9 Well Done"></a>Step 9 Well Done</h4><p>As this point, you have Successfully flash the firmware with OpenWRT firmware.<br>Login to the web, and flash with the openwrt-18.06.4-ar71xx-nand-mr18-squashfs-sysupgrade.tar, your MR18 should reboot and be fully running OpenWrt/LEDE!</p>
<h4 id="April-9-2020-UPDATE"><a href="#April-9-2020-UPDATE" class="headerlink" title="April 9 2020 UPDATE"></a>April 9 2020 UPDATE</h4><p>One of my customer saw my post about this flash process, he reached out to me and bring me a MR18 unit for replacing the firmware.<br>Luckily, the version that he purchased was 25, which I can use the method C to flash the firmware easily.<br>That unit has version number</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boot 66 build 25-201712141532-Gobb86dd3-hamaki board ar7100</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Wireless</tag>
      </tags>
  </entry>
  <entry>
    <title>Meraki MX60 GateWay OpenWRT</title>
    <url>/2019/03/20/Meraki-MX60-GateWay-OpenWRT/</url>
    <content><![CDATA[<p>The Meraki MX60 is an enterprise security appliance designed for distributed deployments that require remote administration. It is ideal for network administrators who demand both ease of deployment and a state-of-the-art feature set.</p>
<p>Since I used the MR 18 for little over a month now, I am very satisficed with the performance that offered, and I want to get FULL Meraki gear now. This time, I am trying to get another device going for OpenWRT, Meraki MX60.</p>
<a id="more"></a>

<p>All the firmware files, please navigate to OpenWRT official site for downloads <a href="https://openwrt.org/toh/meraki/mx60#snapshots" target="_blank" rel="noopener">“Click Me”</a><br>AND<br><a href="https://github.com/riptidewave93/LEDE-MX60-MX60W/blob/master/README.md#flashing" target="_blank" rel="noopener">“Another powerful Dude”</a></p>
<h4 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h4><ol>
<li>Meraki MX60/MX60W</li>
<li>UART adapter wired to the MX60/MX60W (speed is 115200).</li>
<li>Local computer (Static IP of 192.168.1.101) directly wired laptop to MX60’s WAN port.</li>
<li>A local TFTP server.</li>
</ol>
<p>Linux made this whole things extremely easy :)</p>
<h4 id="Step-1-Teardown-the-unit"><a href="#Step-1-Teardown-the-unit" class="headerlink" title="Step 1 Teardown the unit."></a>Step 1 Teardown the unit.</h4><p>Teardown the MX 60 by undo 2 screws on both sides of the unit (total 4 screws),these screws are T7 (should be) screws. Take your UART adapter and wire to MX60, P1 is closest to the H1 screw, and P4 is closest to the JTAG port.</p>
<p>P1: VCC —- DO NOT CONNECT</p>
<p>P2: RX White color</p>
<p>P3: TX Green color</p>
<p>P4: GND Black color</p>
<h4 id="Step-2-Download-the-image-and-config-TFTP"><a href="#Step-2-Download-the-image-and-config-TFTP" class="headerlink" title="Step 2 Download the image, and config TFTP"></a>Step 2 Download the image, and config TFTP</h4><p>Download the current meraki_mx60-initramfs-kernel.bin from this repo, then put the file into your TFTP server root directory and rename it to buck.bin</p>
<p>If you having issues of installing and using the TFTP server, please navigate <a href="https://mohammadthalif.wordpress.com/2010/03/05/installing-and-testing-tftpd-in-ubuntudebian/" target="_blank" rel="noopener">“HERE”</a> to install and config TFTP server first. If you use windows computer, you might experience some interesting issues, good luck..</p>
<h4 id="Step-3-Connecting-to-the-Console-port"><a href="#Step-3-Connecting-to-the-Console-port" class="headerlink" title="Step 3 Connecting to the Console port"></a>Step 3 Connecting to the Console port</h4><p>Start your TFTP server at 192.168.1.101 and connect the MX60 to the WAN Port. Before you move into the next step, make sure that you have access to the UART port from console port. If you are using Linux, use this command to check which console port that you are connected to.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmesg | grep tty</span><br></pre></td></tr></table></figure>
<p>If you see the “line in use” issue,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapple@pineapple-Latitude-E6540:~$ cu -l &#x2F;dev&#x2F;ttyUSB0 -s 115200</span><br><span class="line">cu: open (&#x2F;dev&#x2F;ttyUSB0): Permission denied</span><br><span class="line">cu: &#x2F;dev&#x2F;ttyUSB0: Line in use</span><br></pre></td></tr></table></figure>
<p>It is a permission issue, and it is repairable. To fix this, please use</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 666 &#x2F;dev&#x2F;ttyUSB0</span><br></pre></td></tr></table></figure>
<p>Once finished, you may connect to this console port by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cu -l &#x2F;dev&#x2F;ttyUSB0 -s 115200</span><br></pre></td></tr></table></figure>
<h4 id="Step-4-Setting-up-the-variables-in-the-MX60"><a href="#Step-4-Setting-up-the-variables-in-the-MX60" class="headerlink" title="Step 4 Setting up the variables in the MX60"></a>Step 4 Setting up the variables in the MX60</h4><p>Power on the MX60(W), and interrupt u-boot (accessible on the serial console). At the prompt, enter the following commands to update your boot settings:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenv lede_load1 ubi read \$&#123;meraki_loadaddr&#125; kernel</span><br><span class="line"></span><br><span class="line">setenv lede_load2 ubi read \$&#123;meraki_loadaddr&#125; recovery</span><br><span class="line"></span><br><span class="line">setenv lede_bootkernel bootm \$&#123;meraki_loadaddr_kernel&#125; - \$&#123;meraki_loadaddr_fdt&#125;</span><br><span class="line"></span><br><span class="line">setenv owrt_bootkernel bootm \$&#123;meraki_loadaddr&#125;</span><br><span class="line"></span><br><span class="line">setenv lede_bootargs setenv bootargs console&#x3D;ttyS0,\$&#123;baudrate&#125; rootfstype&#x3D;squashfs mtdoops.mtddev&#x3D;oops</span><br><span class="line"></span><br><span class="line">setenv owrt_boot run meraki_ubi lede_bootargs\; run lede_load1 meraki_checkpart lede_bootkernel\; run lede_load2 owrt_bootkernel</span><br><span class="line"></span><br><span class="line">setenv bootcmd run owrt_boot</span><br><span class="line"></span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure>
<p>Make sure you enter them one by one. If you mistype something, Power cycle the unit, and try it again.<br>If you have completed correctly, you may see</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Saving Environment to NAND...</span><br><span class="line"></span><br><span class="line">Erasing redundant Nand...</span><br><span class="line"></span><br><span class="line">Erasing at 0x1e0000 -- 100% complete.</span><br><span class="line"></span><br><span class="line">Writing to redundant Nand... done</span><br></pre></td></tr></table></figure>
<h4 id="Step-5-Boot-from-TFTP-server"><a href="#Step-5-Boot-from-TFTP-server" class="headerlink" title="Step 5 Boot from TFTP server"></a>Step 5 Boot from TFTP server</h4><p>Enter following commands to boot initramfs image hosted on your local computer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenv ipaddr 192.168.1.1</span><br><span class="line">setenv bootargs console&#x3D;ttyS0,$baudrate mtdoops.mtddev&#x3D;oops; tftpboot $meraki_loadaddr buck.bin; bootm $fileaddr</span><br></pre></td></tr></table></figure>
<p>Second command is kindda long, make sure you type the whole thing at once..</p>
<p>This command will take the buck.bin file from your computer and transmit via TFTP protocol, then boot from this buck.bin file</p>
<p>After 18-20 seconds, you will see</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[   11.074089] random: jshn: uninitialized urandom read (4 bytes read)</span><br><span class="line"></span><br><span class="line">[   17.559987] eth0: link is up, 1000 FDX</span><br><span class="line"></span><br><span class="line">[   17.586899] br-lan: port 1(eth0.1) entered blocking state</span><br><span class="line"></span><br><span class="line">[   17.592328] br-lan: port 1(eth0.1) entered disabled state</span><br><span class="line"></span><br><span class="line">[   17.597958] device eth0.1 entered promiscuous mode</span><br><span class="line"></span><br><span class="line">[   17.602750] device eth0 entered promiscuous mode</span><br><span class="line"></span><br><span class="line">[   17.700640] br-lan: port 1(eth0.1) entered blocking state</span><br><span class="line"></span><br><span class="line">[   17.706053] br-lan: port 1(eth0.1) entered forwarding state</span><br><span class="line"></span><br><span class="line">[   17.711765] IPv6: ADDRCONF(NETDEV_UP): br-lan: link is not ready</span><br><span class="line"></span><br><span class="line">[   18.611473] IPv6: ADDRCONF(NETDEV_CHANGE): br-lan: link becomes ready</span><br></pre></td></tr></table></figure>
<p>Then HIT ** Enter ** key on your keyboard, you will see a regular Linux CLI interface. Yeah, we are getting somewhere now.</p>
<p>Here is what I have, just an example to show you what it looks like.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&gt; setenv bootargs console&#x3D;ttyS0,$baudrate mtdoops.mtddev&#x3D;oops; tftpboot $meraki_loadaddr buck.bin; bootm $fileaddr</span><br><span class="line">Using ppc_4xx_eth0 device</span><br><span class="line">TFTP from server 192.168.1.101; our IP address is 192.168.1.1</span><br><span class="line">Filename &#39;buck.bin&#39;.</span><br><span class="line">Load address: 0x800000</span><br><span class="line">Loading: #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 #################################################################</span><br><span class="line">	 ##</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 4999476 (4c4934 hex)</span><br><span class="line">## Booting kernel from Legacy Image at 00800000 ...</span><br><span class="line">   Image Name:   mx60 initramfs</span><br><span class="line">   Created:      2019-06-27  12:18:52 UTC</span><br><span class="line">   Image Type:   PowerPC Linux Multi-File Image (gzip compressed)</span><br><span class="line">   Data Size:    4999412 Bytes &#x3D;  4.8 MB</span><br><span class="line">   Load Address: 00000000</span><br><span class="line">   Entry Point:  00000000</span><br><span class="line">   Contents:</span><br><span class="line">      Image 0: 4934850 Bytes &#x3D;  4.7 MB</span><br><span class="line">      Image 1: 32 Bytes &#x3D;  0 kB</span><br><span class="line">      Image 2: 64512 Bytes &#x3D; 63 kB</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line">## Loading init Ramdisk from multi component Legacy Image at 00800000 ...</span><br><span class="line">## Flattened Device Tree from multi component Image at 00800000</span><br><span class="line">   Booting using the fdt at 0xcb4d34</span><br><span class="line">   Uncompressing Multi-File Image ... OK</span><br><span class="line">   Loading Ramdisk to 1fb57000, end 1fb57020 ... OK</span><br><span class="line">[    0.000000] Linux version 4.14.131 (buildbot@2ccc8102e0c3) (gcc version 7.3.0 (OpenWrt GCC 7.3.0 r7808-ef686b7292)) #0 Thu Jun 27 12:18:52 2019</span><br><span class="line">[    0.000000] Found initrd at 0xdfb57000:0xdfb57020</span><br><span class="line">[    0.000000] Using PowerPC 44x Platform machine description</span><br><span class="line">[    0.000000] bootconsole [udbg0] enabled</span><br><span class="line">[    0.000000] -----------------------------------------------------</span><br><span class="line">[    0.000000] phys_mem_size     &#x3D; 0x20000000</span><br><span class="line">[    0.000000] dcache_bsize      &#x3D; 0x20</span><br><span class="line">[    0.000000] icache_bsize      &#x3D; 0x20</span><br><span class="line">[    0.000000] cpu_features      &#x3D; 0x0000000010100040</span><br><span class="line">[    0.000000]   possible        &#x3D; 0x0000000030100040</span><br><span class="line">[    0.000000]   always          &#x3D; 0x0000000000100000</span><br><span class="line">[    0.000000] cpu_user_features &#x3D; 0x8c008000 0x00000000</span><br><span class="line">[    0.000000] mmu_features      &#x3D; 0x00000008</span><br><span class="line">[    0.000000] -----------------------------------------------------</span><br><span class="line">[    0.000000] Zone ranges:</span><br><span class="line">[    0.000000]   DMA      [mem 0x0000000000000000-0x000000001fffffff]</span><br><span class="line">[    0.000000]   Normal   empty</span><br><span class="line">[    0.000000] Movable zone start for each node</span><br><span class="line">[    0.000000] Early memory node ranges</span><br><span class="line">[    0.000000]   node   0: [mem 0x0000000000000000-0x000000001fffffff]</span><br><span class="line">[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x000000001fffffff]</span><br><span class="line">[    0.000000] MMU: Allocated 1088 bytes of context maps for 255 contexts</span><br><span class="line">[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 130048</span><br><span class="line">[    0.000000] Kernel command line: console&#x3D;ttyS0,115200 mtdoops.mtddev&#x3D;oops</span><br><span class="line">[    0.000000] PID hash table entries: 2048 (order: 1, 8192 bytes)</span><br><span class="line">[    0.000000] Dentry cache hash table entries: 65536 (order: 6, 262144 bytes)</span><br><span class="line">[    0.000000] Inode-cache hash table entries: 32768 (order: 5, 131072 bytes)</span><br><span class="line">[    0.000000] Memory: 511720K&#x2F;524288K available (4504K kernel code, 204K rwdata, 588K rodata, 2388K init, 233K bss, 12568K reserved, 0K cma-reserved)</span><br><span class="line">[    0.000000] Kernel virtual memory layout:</span><br><span class="line">[    0.000000]   * 0xfffdf000..0xfffff000  : fixmap</span><br><span class="line">[    0.000000]   * 0xfde00000..0xfe000000  : consistent mem</span><br><span class="line">[    0.000000]   * 0xfddfe000..0xfde00000  : early ioremap</span><br><span class="line">[    0.000000]   * 0xe1000000..0xfddfe000  : vmalloc &amp; ioremap</span><br><span class="line">[    0.000000] SLUB: HWalign&#x3D;32, Order&#x3D;0-3, MinObjects&#x3D;0, CPUs&#x3D;1, Nodes&#x3D;1</span><br><span class="line">[    0.000000] NR_IRQS: 512, nr_irqs: 512, preallocated irqs: 16</span><br><span class="line">[    0.000000] UIC0 (32 IRQ sources) at DCR 0xc0</span><br><span class="line">[    0.000000] UIC1 (32 IRQ sources) at DCR 0xd0</span><br><span class="line">[    0.000000] UIC2 (32 IRQ sources) at DCR 0xe0</span><br><span class="line">[    0.000000] UIC3 (32 IRQ sources) at DCR 0xf0</span><br><span class="line">[    0.000016] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0xb881274fa3, max_idle_ns: 440795210636 ns</span><br><span class="line">[    0.010235] clocksource: timebase mult[1400000] shift[24] registered</span><br><span class="line">[    0.016599] pid_max: default: 32768 minimum: 301</span><br><span class="line">[    0.021276] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.027808] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.037971] random: get_random_u32 called from 0xc01e3314 with crng_init&#x3D;0</span><br><span class="line">[    0.045062] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275000 ns</span><br><span class="line">[    0.054729] futex hash table entries: 256 (order: -1, 3072 bytes)</span><br><span class="line">[    0.061685] NET: Registered protocol family 16</span><br><span class="line"></span><br><span class="line">[    0.068318] PPC4XX OCM1: 32768 Bytes (enabled)</span><br><span class="line">[    0.072673] PPC4XX OCM1: 32768 Bytes (non-cached)</span><br><span class="line">[    0.077333] PPC4XX OCM1: 0 Bytes (cached)</span><br><span class="line">[    0.081368] debugfs ppc4xx ocm: failed to create file</span><br><span class="line">[    0.086500] 256k L2-cache enabled</span><br><span class="line">[    0.089817] PCIE0: Port disabled via device-tree</span><br><span class="line">[    0.094980] PCI: Probing PCI hardware</span><br><span class="line">[    0.107103] SCSI subsystem initialized</span><br><span class="line">[    0.113226] clocksource: Switched to clocksource timebase</span><br><span class="line">[    0.119333] NET: Registered protocol family 2</span><br><span class="line">[    0.124073] TCP established hash table entries: 4096 (order: 2, 16384 bytes)</span><br><span class="line">[    0.131072] TCP bind hash table entries: 4096 (order: 2, 16384 bytes)</span><br><span class="line">[    0.137460] TCP: Hash tables configured (established 4096 bind 4096)</span><br><span class="line">[    0.143806] UDP hash table entries: 256 (order: 0, 4096 bytes)</span><br><span class="line">[    0.149565] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)</span><br><span class="line">[    0.155883] NET: Registered protocol family 1</span><br><span class="line">[    2.111776] Unpacking initramfs...</span><br><span class="line">[    2.116923] dw_dmac 4bffd0800.dma: DesignWare DMA Controller, 2 channels</span><br><span class="line">[    2.128781] Crashlog allocated RAM at address 0x3f00000</span><br><span class="line">[    2.134614] workingset: timestamp_bits&#x3D;30 max_order&#x3D;17 bucket_order&#x3D;0</span><br><span class="line">[    2.144492] squashfs: version 4.0 (2009&#x2F;01&#x2F;31) Phillip Lougher</span><br><span class="line">[    2.159201] io scheduler noop registered</span><br><span class="line">[    2.163050] io scheduler deadline registered (default)</span><br><span class="line">[    2.168564] Serial: 8250&#x2F;16550 driver, 16 ports, IRQ sharing enabled</span><br><span class="line">�[    2.200204] serial8250.0: ttyS0 at MMIO 0x4ef600400 (irq &#x3D; 19, base_baud &#x3D; 462962) is a U6_16550A</span><br><span class="line">[    2.208987] console [ttyS0] enabled</span><br><span class="line">[    2.208987] console [ttyS0] enabled</span><br><span class="line">[    2.215878] bootconsole [udbg0] disabled</span><br><span class="line">[    2.215878] bootconsole [udbg0] disabled</span><br><span class="line">[    2.224187] console [ttyS0] disabled</span><br><span class="line">[    2.227814] console [ttyS0] enabled</span><br><span class="line">[    2.232102] nand: device found, Manufacturer ID: 0xec, Chip ID: 0xd3</span><br><span class="line">[    2.238449] nand: Samsung NAND 1GiB 3,3V 8-bit</span><br><span class="line">[    2.242884] nand: 1024 MiB, SLC, erase size: 128 KiB, page size: 2048, OOB size: 64</span><br><span class="line">[    2.250525] Scanning device for bad blocks</span><br><span class="line">[    2.329463] Bad eraseblock 1175 at 0x0000092e0000</span><br><span class="line">[    2.388102] Bad eraseblock 2061 at 0x0000101a0000</span><br><span class="line">[    2.650447] Bad eraseblock 6271 at 0x000030fe0000</span><br><span class="line">[    2.711837] Bad eraseblock 7195 at 0x000038360000</span><br><span class="line">[    2.733198] Bad eraseblock 7467 at 0x00003a560000</span><br><span class="line">[    2.749029] Bad eraseblock 7649 at 0x00003bc20000</span><br><span class="line">[    2.795027] 5 fixed-partitions partitions found on MTD device 4e4000000.ndfc.nand</span><br><span class="line">[    2.802524] Creating 5 MTD partitions on &quot;4e4000000.ndfc.nand&quot;:</span><br><span class="line">[    2.808441] 0x000000000000-0x000000100000 : &quot;u-boot&quot;</span><br><span class="line">[    2.814017] 0x000000100000-0x000000200000 : &quot;u-boot-env&quot;</span><br><span class="line">[    2.819794] 0x000000200000-0x000000240000 : &quot;oops&quot;</span><br><span class="line">[    2.825043] 0x000000240000-0x000040000000 : &quot;ubi&quot;</span><br><span class="line">[    2.836614] 0x000000000000-0x000040000000 : &quot;all&quot;</span><br><span class="line">[    2.848630] libphy: Fixed MDIO Bus: probed</span><br><span class="line">[    2.852735] PPC 4xx OCP EMAC driver, version 3.54</span><br><span class="line">[    2.857732] MAL v2 &#x2F;plb&#x2F;mcmal, 1 TX channels, 1 RX channels</span><br><span class="line">[    2.863468] RGMII &#x2F;plb&#x2F;opb&#x2F;emac-rgmii@ef601500 initialized with MDIO support</span><br><span class="line">[    2.870615] TAH &#x2F;plb&#x2F;opb&#x2F;emac-tah@ef601350 initialized</span><br><span class="line">[    2.876043] &#x2F;plb&#x2F;opb&#x2F;emac-rgmii@ef601500: input 0 in rgmii mode</span><br><span class="line">[    2.882061] libphy: emac_mdio: probed</span><br><span class="line">[    2.897438] switch0: Atheros AR8327 rev. 4 switch registered on 4ef600c00.ethernet</span><br><span class="line">[    3.455420] eth0: EMAC-0 &#x2F;plb&#x2F;opb&#x2F;ethernet@ef600c00, MAC 00:01:73:01:23:41</span><br><span class="line">[    3.462284] eth0: found Atheros AR8216&#x2F;AR8236&#x2F;AR8316 PHY (0x00)</span><br><span class="line">[    3.468381] i2c &#x2F;dev entries driver</span><br><span class="line">[    3.472190] ibm-iic 4ef600700.i2c: using standard (100 kHz) mode</span><br><span class="line">[    3.480030] booke_wdt: powerpc book-e watchdog driver loaded</span><br><span class="line">[    3.489749] NET: Registered protocol family 10</span><br><span class="line">[    3.495813] Segment Routing with IPv6</span><br><span class="line">[    3.499556] NET: Registered protocol family 17</span><br><span class="line">[    3.504024] bridge: filtering via arp&#x2F;ip&#x2F;ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.</span><br><span class="line">[    3.516938] 8021q: 802.1Q VLAN Support v1.8</span><br><span class="line">[    3.523171] UBI: auto-attach mtd3</span><br><span class="line">[    3.526514] ubi0: attaching mtd3</span><br><span class="line">[    5.657288] ubi0: scanning is finished</span><br><span class="line">[    5.678486] ubi0: attached mtd3 (name &quot;ubi&quot;, size 1021 MiB)</span><br><span class="line">[    5.684065] ubi0: PEB size: 131072 bytes (128 KiB), LEB size: 129024 bytes</span><br><span class="line">[    5.690919] ubi0: min.&#x2F;max. I&#x2F;O unit sizes: 2048&#x2F;2048, sub-page size 512</span><br><span class="line">[    5.697596] ubi0: VID header offset: 512 (aligned 512), data offset: 2048</span><br><span class="line">[    5.704362] ubi0: good PEBs: 8168, bad PEBs: 6, corrupted PEBs: 0</span><br><span class="line">[    5.710436] ubi0: user volume: 2, internal volumes: 1, max. volumes count: 128</span><br><span class="line">[    5.717636] ubi0: max&#x2F;mean erase counter: 633&#x2F;623, WL threshold: 4096, image sequence number: 1146486028</span><br><span class="line">[    5.727077] ubi0: available PEBs: 7927, total reserved PEBs: 241, PEBs reserved for bad PEB handling: 154</span><br><span class="line">[    5.736630] hctosys: unable to open rtc device (rtc0)</span><br><span class="line">[    5.741988] ubi0: background thread &quot;ubi_bgt0d&quot; started, PID 380</span><br><span class="line">[    5.759276] Freeing unused kernel memory: 2388K</span><br><span class="line">[    5.773756] init: Console is alive</span><br><span class="line">[    5.777331] init: - watchdog -</span><br><span class="line">[    5.788152] kmodloader: loading kernel modules from &#x2F;etc&#x2F;modules-boot.d&#x2F;*</span><br><span class="line">[    5.799290] kmodloader: done loading kernel modules from &#x2F;etc&#x2F;modules-boot.d&#x2F;*</span><br><span class="line">[    5.816815] init: - preinit -</span><br><span class="line">[    5.974053] eth0: link is up, 1000 FDX</span><br><span class="line">[    5.978204] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready</span><br><span class="line">[    5.984080] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready</span><br><span class="line">[    6.000114] random: procd: uninitialized urandom read (4 bytes read)</span><br><span class="line">Press the [f] key and hit [enter] to enter failsafe mode</span><br><span class="line">Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level</span><br><span class="line">[    9.096841] procd: - early -</span><br><span class="line">[    9.099825] procd: - watchdog -</span><br><span class="line">[    9.640342] procd: - watchdog -</span><br><span class="line">[    9.643694] procd: - ubus -</span><br><span class="line">[    9.651153] random: ubusd: uninitialized urandom read (4 bytes read)</span><br><span class="line">[    9.696847] random: ubusd: uninitialized urandom read (4 bytes read)</span><br><span class="line">[    9.703473] random: ubusd: uninitialized urandom read (4 bytes read)</span><br><span class="line">[    9.710456] procd: - init -</span><br><span class="line">Please press Enter to activate this console.</span><br><span class="line">[    9.819121] kmodloader: loading kernel modules from &#x2F;etc&#x2F;modules.d&#x2F;*</span><br><span class="line">[    9.828283] ip6_tables: (C) 2000-2006 Netfilter Core Team</span><br><span class="line">[    9.839428] Loading modules backported from Linux version wt-2017-11-01-0-gfe248fc2c180</span><br><span class="line">[    9.847426] Backport generated by backports.git v4.14-rc2-1-31-g86cf0e5d</span><br><span class="line">[    9.855940] ip_tables: (C) 2000-2006 Netfilter Core Team</span><br><span class="line">[    9.867311] nf_conntrack version 0.5.0 (8192 buckets, 32768 max)</span><br><span class="line">[    9.902311] xt_time: kernel timezone is -0000</span><br><span class="line">[    9.951483] PPP generic driver version 2.4.2</span><br><span class="line">[    9.957398] NET: Registered protocol family 24</span><br><span class="line">[    9.984560] kmodloader: done loading kernel modules from &#x2F;etc&#x2F;modules.d&#x2F;*</span><br><span class="line">[   11.073636] urandom_read: 5 callbacks suppressed</span><br><span class="line">[   11.073642] random: jshn: uninitialized urandom read (4 bytes read)</span><br><span class="line">[   17.553369] eth0: link is up, 1000 FDX</span><br><span class="line">[   17.582865] br-lan: port 1(eth0.1) entered blocking state</span><br><span class="line">[   17.588296] br-lan: port 1(eth0.1) entered disabled state</span><br><span class="line">[   17.593941] device eth0.1 entered promiscuous mode</span><br><span class="line">[   17.598733] device eth0 entered promiscuous mode</span><br><span class="line">[   17.689293] br-lan: port 1(eth0.1) entered blocking state</span><br><span class="line">[   17.694700] br-lan: port 1(eth0.1) entered forwarding state</span><br><span class="line">[   17.700404] IPv6: ADDRCONF(NETDEV_UP): br-lan: link is not ready</span><br><span class="line">[   18.611431] IPv6: ADDRCONF(NETDEV_CHANGE): br-lan: link becomes ready</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BusyBox v1.28.4 () built-in shell (ash)</span><br><span class="line"></span><br><span class="line">  _______                     ________        __</span><br><span class="line"> |       |.-----.-----.-----.|  |  |  |.----.|  |_</span><br><span class="line"> |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|</span><br><span class="line"> |_______||   __|_____[   20.053067] random: fast init done</span><br><span class="line">|__|__||________||__|  |____|</span><br><span class="line">          |__| W I R E L E S S   F R E E D O M</span><br><span class="line"> -----------------------------------------------------</span><br><span class="line"> OpenWrt 18.06.4, r7808-ef686b7292</span><br><span class="line"> -----------------------------------------------------</span><br><span class="line">&#x3D;&#x3D;&#x3D; WARNING! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">There is no root password defined on this device!</span><br><span class="line">Use the &quot;passwd&quot; command to set up a new password</span><br><span class="line">in order to prevent unauthorized SSH logins.</span><br><span class="line">--------------------------------------------------</span><br><span class="line">root@OpenWrt:&#x2F;#</span><br></pre></td></tr></table></figure>
<h4 id="Step-6-Find-out-the-Vol-ID"><a href="#Step-6-Find-out-the-Vol-ID" class="headerlink" title="Step 6 Find out the Vol ID"></a>Step 6 Find out the Vol ID</h4><p>Once booted, find the UBI Volume ID of board-config. This is done with ubinfo /dev/ubi0 -N board-config</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@OpenWrt:&#x2F;# ubinfo &#x2F;dev&#x2F;ubi0 -N board-config</span><br><span class="line">Volume ID:   0 (on ubi0)</span><br><span class="line">Type:        dynamic</span><br><span class="line">Alignment:   1</span><br><span class="line">Size:        1 LEBs (129024 bytes, 126.0 KiB)</span><br><span class="line">State:       OK</span><br><span class="line">Name:        board-config</span><br><span class="line">Character device major&#x2F;minor: 251:1</span><br><span class="line">root@OpenWrt:&#x2F;#</span><br></pre></td></tr></table></figure>
<p>So,in this case, our number is 0. When I did it for the first time, this number was 2.</p>
<h4 id="Step-7-Cleanup-and-Max-Out-Spaces"><a href="#Step-7-Cleanup-and-Max-Out-Spaces" class="headerlink" title="Step 7 Cleanup and Max Out Spaces"></a>Step 7 Cleanup and Max Out Spaces</h4><p>Cleanup and move around UBI partitions for maximum space. Note that in this example, replace XX with the Volume ID for board-config:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubirmvol &#x2F;dev&#x2F;ubi0 -N part1</span><br><span class="line"></span><br><span class="line">ubirmvol &#x2F;dev&#x2F;ubi0 -N part2</span><br><span class="line"></span><br><span class="line">ubirmvol &#x2F;dev&#x2F;ubi0 -N storage</span><br><span class="line"></span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;ubi0_XX of&#x3D;&#x2F;tmp&#x2F;board-config.img</span><br><span class="line"></span><br><span class="line">ubirmvol &#x2F;dev&#x2F;ubi0 -N board-config</span><br><span class="line"></span><br><span class="line">ubimkvol &#x2F;dev&#x2F;ubi0 -s 126KiB -N board-config</span><br><span class="line"></span><br><span class="line">ubiupdatevol &#x2F;dev&#x2F;ubi0_0 &#x2F;tmp&#x2F;board-config.img</span><br></pre></td></tr></table></figure>
<h4 id="Step-8-Back-up-the-image-file"><a href="#Step-8-Back-up-the-image-file" class="headerlink" title="Step 8 Back up the image file"></a>Step 8 Back up the image file</h4><p>Copy the initramfs-kernel.bin into router itself and back it up. By issuing this command on your terminal, it will copy over SSH into your router tmp folder.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp &#x2F;home&#x2F;youname&#x2F;Downloads&#x2F;openwrt-apm821xx-nand-meraki_mx60-initramfs-kernel.bin root@192.168.1.1:&#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="Step-9-Create-a-recovery-UBI-partition"><a href="#Step-9-Create-a-recovery-UBI-partition" class="headerlink" title="Step 9 Create a recovery UBI partition"></a>Step 9 Create a recovery UBI partition</h4><p>This will host an initramfs build so our board can have a failback image in case of a bad flash, or sysupgrade issue.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -alh &#x2F;tmp&#x2F;lede-apm821xx-nand-mx60-initramfs-kernel.bin</span><br><span class="line"></span><br><span class="line">ubimkvol &#x2F;dev&#x2F;ubi0 -s 10MiB -N recovery</span><br><span class="line"></span><br><span class="line">ubiupdatevol &#x2F;dev&#x2F;ubi0_1 &#x2F;tmp&#x2F;openwrt-apm821xx-nand-meraki_mx60-initramfs-kernel.bin</span><br></pre></td></tr></table></figure>
<h4 id="Step-10-Login-to-Luci-interface"><a href="#Step-10-Login-to-Luci-interface" class="headerlink" title="Step 10 Login to Luci interface"></a>Step 10 Login to Luci interface</h4><ol>
<li>If you are using openwrt-apm821xx-nand-meraki_mx60-initramfs-kernel.bin<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-please Move your ethernet cable from WAN port to LAN1 port.</span><br><span class="line"></span><br><span class="line">-Make sure you can ping 192.168.1.1 from your computer.</span><br><span class="line"></span><br><span class="line">-Connect the WAN port to the internet</span><br><span class="line"></span><br><span class="line">-opkg update</span><br><span class="line"></span><br><span class="line">-opkg install luci</span><br><span class="line"></span><br><span class="line">-wait for process get done. There you go, now you have luci, then you can do 192.168.1.1 and flash sysupgrade.tar file to complete this flash process.</span><br></pre></td></tr></table></figure></li>
<li>If you are using openwrt-18.06.4-apm821xx-nand-meraki_mx60-initramfs-kernel.bin,<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-please Move your ethernet cable from WAN port to LAN1 port.</span><br><span class="line"></span><br><span class="line">-Make sure you can ping 192.168.1.1 from your computer.</span><br><span class="line"></span><br><span class="line">-Go to 192.168.1.1</span><br><span class="line"></span><br><span class="line">-upload the sysupgrade.tar file to complete this flash process.</span><br></pre></td></tr></table></figure>
<h4 id="Step-11-YOU-ARE-ALL-SET-Enjoy-Openwrt"><a href="#Step-11-YOU-ARE-ALL-SET-Enjoy-Openwrt" class="headerlink" title="Step 11 YOU ARE ALL SET. Enjoy Openwrt!"></a>Step 11 YOU ARE ALL SET. Enjoy Openwrt!</h4>Overall, this flash process was challenging and very interesting, it gets more into the file system on the unit itself. I did having hard to understand these file structures in the first place, but after Wikipedia a bit, I was able to complete the flash processes. What a fun and interesting project!   </li>
</ol>
<p>Family photo of the current HomeLab setup, More on that HP unit.</p>
<img src="/2019/03/20/Meraki-MX60-GateWay-OpenWRT/2.jpg" class="">
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Old Man&#39;s New Home HP 2915-8G</title>
    <url>/2019/04/02/Old-Man-s-New-Home-HP-2915-8G/</url>
    <content><![CDATA[<p>The HP ProCurve 2915-8G-PoE J9562A and 2615-8-PoE Switches are multiport switches that can be used to build high-performance switched workgroup networks.</p>
<p>Official documentation was published at April, 2010. Well, I guess it could considered as “high-performance”.</p>
<p>Since my home has no ethernet connectivity at the moment, we do need to plan it before we go..</p>
<a id="more"></a>

<p>Before jump into the configuration, here is the overview of my HomeLab.</p>
<p>Gateway<br>Wan Vlan 2<br>1-3 vlan 10 Secured network Vlan 10<br>4   Trunk port, vlan allow, 10,20,30,40,50</p>
<p>Switch<br>Port 1  AP, assign to wireless vlan 30<br>Port 3,5  Secured network vlan 10<br>Port 2,4 HomeLab vlan 20 for R520<br>Port 6,7 Homelab vlan 20 waiting for future servers.<br>Port 8 DMZ vlan 50 self-hosting services or Cyber Lab<br>Port 9 iDrac R520 Vlan 40<br>Port 10 Trunk port from MX 60</p>
<p>Here is the sample commands that I used for modify any configurations. I am a cisco person, it took me a bit for me to understand what their logic really works LOL</p>
<p>There are two default users on this unit, manager and operator</p>
<p>To set the password for both</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapplesw(config)#password manager</span><br><span class="line">New password: *******</span><br><span class="line">Please retype new password: *******</span><br><span class="line"></span><br><span class="line">pineapplesw(config)#password operator</span><br><span class="line">New password: *******</span><br><span class="line">Please retype new password: *******</span><br></pre></td></tr></table></figure>


<p>To assign a port to a vlan, untagged means port 3 and 5 will be the member of that vlan. Tagged means uplink port.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">untagged 3, 5</span><br><span class="line">tagged 10</span><br><span class="line">ip addrees x.x.x.x 255.255.255.0</span><br></pre></td></tr></table></figure>

<p>To config a Trunk on this unit,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapplesw(config)#trunk 2,4,Trk1 lacp</span><br><span class="line">pineapplesw(config)#vlan 20</span><br><span class="line">pineapplesw(vlan-20)#untagged Trk1</span><br><span class="line">pineapplesw(vlan-20)#end</span><br></pre></td></tr></table></figure>
<p>To view the Trunk config</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapplesw#show trunks</span><br></pre></td></tr></table></figure>
<p>To view the LACP status</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapplesw#show lacp</span><br></pre></td></tr></table></figure>

<p>To remove the trunks</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pineapplesw(config)#no trunk Trk1</span><br></pre></td></tr></table></figure>

<p>TO do list,</p>
<ol>
<li>On this model, I am working on to do trunk port and allow multiple vlan going through (cisco head again).</li>
</ol>
<p>The Trunk mentioned above was link aggregation..not the cisco Trunk…</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Switch</tag>
      </tags>
  </entry>
</search>
